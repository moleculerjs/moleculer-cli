// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`E2E: create command > should create js service 1`] = `
""use strict";

/**
 * test service
 */
module.exports = {
	name: "test",

	/**
	 * Service settings
	 */
	settings: {},

	/**
	 * Service metadata
	 */
	metadata: {},

	/**
	 * Service dependencies
	 */
	dependencies: [],

	/**
	 * Actions
	 */
	actions: {
		/**
		 * Test action
		 */
		test: {
			async handler(ctx) {
				return "Hello Moleculer";
			}
		}
	},

	/**
	 * Events
	 */
	events: {
		async "some.thing"(ctx) {
			this.logger.info("Something happened", ctx.params);
		}
	},

	/**
	 * Methods
	 */
	methods: {},

	/**
	 * Service created lifecycle event handler
	 */
	created() {},

	/**
	 * Service started lifecycle event handler
	 */
	async started() {},

	/**
	 * Service stopped lifecycle event handler
	 */
	async stopped() {}
};
"
`;

exports[`E2E: create command > should create ts service 1`] = `
""use strict";

import { Service, ServiceBroker, Context } from "moleculer";

export default class TestService extends Service {
	public constructor(public broker: ServiceBroker) {
		super(broker);
		this.parseServiceSchema({
			name: "test",

			/**
			 * Service settings
			 */
			settings: {},

			/**
			 * Service metadata
			 */
			metadata: {},

			/**
			 * Service dependencies
			 */
			dependencies: [],

			/**
			 * Actions
			 */

			actions: {
				/**
				 * Test action
				 */
				test: {
					async handler(
						ctx: Context<{ name: string }>
					): Promise<string> {
						return this.ActionWelcome(ctx.params.name);
					}
				}
			}
		});
	}

	public ActionWelcome(name: string): string {
		return \`Welcome, \${name}\`;
	}
}
"
`;

exports[`E2E: start command > should create js service 1`] = `
""use strict";

/**
 * test service
 */
module.exports = {
	name: "test",

	/**
	 * Service settings
	 */
	settings: {},

	/**
	 * Service metadata
	 */
	metadata: {},

	/**
	 * Service dependencies
	 */
	dependencies: [],

	/**
	 * Actions
	 */
	actions: {
		/**
		 * Test action
		 */
		test: {
			async handler(ctx) {
				return "Hello Moleculer";
			}
		}
	},

	/**
	 * Events
	 */
	events: {
		async "some.thing"(ctx) {
			this.logger.info("Something happened", ctx.params);
		}
	},

	/**
	 * Methods
	 */
	methods: {},

	/**
	 * Service created lifecycle event handler
	 */
	created() {},

	/**
	 * Service started lifecycle event handler
	 */
	async started() {},

	/**
	 * Service stopped lifecycle event handler
	 */
	async stopped() {}
};
"
`;

exports[`E2E: start command > should create ts service 1`] = `
""use strict";

import { Service, ServiceBroker, Context } from "moleculer";

export default class TestService extends Service {
	public constructor(public broker: ServiceBroker) {
		super(broker);
		this.parseServiceSchema({
			name: "test",

			/**
			 * Service settings
			 */
			settings: {},

			/**
			 * Service metadata
			 */
			metadata: {},

			/**
			 * Service dependencies
			 */
			dependencies: [],

			/**
			 * Actions
			 */

			actions: {
				/**
				 * Test action
				 */
				test: {
					async handler(
						ctx: Context<{ name: string }>
					): Promise<string> {
						return this.ActionWelcome(ctx.params.name);
					}
				}
			}
		});
	}

	public ActionWelcome(name: string): string {
		return \`Welcome, \${name}\`;
	}
}
"
`;

exports[`test create > create js service 1`] = `
""use strict";

/**
 * test service
 */
module.exports = {
	name: "test",

	/**
	 * Service settings
	 */
	settings: {},

	/**
	 * Service metadata
	 */
	metadata: {},

	/**
	 * Service dependencies
	 */
	dependencies: [],

	/**
	 * Actions
	 */
	actions: {
		/**
		 * Test action
		 */
		test: {
			async handler(ctx) {
				return "Hello Moleculer";
			}
		}
	},

	/**
	 * Events
	 */
	events: {
		async "some.thing"(ctx) {
			this.logger.info("Something happened", ctx.params);
		}
	},

	/**
	 * Methods
	 */
	methods: {},

	/**
	 * Service created lifecycle event handler
	 */
	created() {},

	/**
	 * Service started lifecycle event handler
	 */
	async started() {},

	/**
	 * Service stopped lifecycle event handler
	 */
	async stopped() {}
};
"
`;

exports[`test create > create ts service 1`] = `
""use strict";

import { Service, ServiceBroker, Context } from "moleculer";

export default class TestService extends Service {
	public constructor(public broker: ServiceBroker) {
		super(broker);
		this.parseServiceSchema({
			name: "test",

			/**
			 * Service settings
			 */
			settings: {},

			/**
			 * Service metadata
			 */
			metadata: {},

			/**
			 * Service dependencies
			 */
			dependencies: [],

			/**
			 * Actions
			 */

			actions: {
				/**
				 * Test action
				 */
				test: {
					async handler(
						ctx: Context<{ name: string }>
					): Promise<string> {
						return this.ActionWelcome(ctx.params.name);
					}
				}
			}
		});
	}

	public ActionWelcome(name: string): string {
		return \`Welcome, \${name}\`;
	}
}
"
`;
